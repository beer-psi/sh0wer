name: Build yacd

on: push

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip-ci')" 
    runs-on: ubuntu-latest
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Install build dependencies
      run: |
        source ./.env
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends wget debootstrap grub-pc-bin \
          grub-efi-amd64-bin mtools squashfs-tools xorriso ca-certificates curl \
          libusb-1.0-0-dev gcc make gzip unzip libc6-dev

        # gotta get 1.5.0
        (
          curl -LO https://github.com/facebook/zstd/releases/download/v1.5.0/zstd-1.5.0.tar.gz
          sudo tar xf zstd-1.5.0.tar.gz -C /opt
          cd /opt/zstd*
          sudo make
          sudo make install
        )
    -
      name: Download odysseyra1n resources
      run: |
        source ./.env
        [ -z "$SILEO" ] && {
            SILEO="https://github.com$(curl -s https://github.com/Sileo/Sileo/releases | grep -Po "/Sileo\/Sileo/releases/download/[\d.]+/org\.coolstar\.sileo_[\d.]+_iphoneos-arm\.deb" | head -1)"
        }
        mkdir -p assets/odysseyra1n
        (
          cd assets/odysseyra1n
          curl -sL -O https://github.com/coolstar/Odyssey-bootstrap/raw/master/bootstrap_1500.tar.gz \
              -O https://github.com/coolstar/Odyssey-bootstrap/raw/master/bootstrap_1600.tar.gz \
              -O https://github.com/coolstar/Odyssey-bootstrap/raw/master/bootstrap_1700.tar.gz \
              -O "$SILEO" \
              -O https://github.com/coolstar/Odyssey-bootstrap/raw/master/org.swift.libswift_5.0-electra2_iphoneos-arm.deb
          gzip -dv ./*.tar.gz
          tar -vc ./* | zstd -zcT0 --ultra -22 > odysseyra1n_resources.tar.zst
          find ./* -not -name "odysseyra1n_resources.tar.zst" -delete
        )
    - 
      name: Build for x86_64
      run: |
        source ./.env
        sed -i "s/ARCH=''/ARCH='x86_64'/" build.sh
        sudo chmod 755 build.sh

        sudo -E ./build.sh
    - 
      name: Build for x86
      run: |
        sed -i "s/ARCH='x86_64'/ARCH='x86'/" build.sh
        sudo -E ./build.sh
    -
      name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        path: out/*
  
  upload-prerelease:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' # Only upload prereleases when it gets merged to main
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Download artifacts
        uses: actions/download-artifact@v2
      -
        name: Get version information
        run: |
          source ./.env
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "name=$NAME" >> $GITHUB_ENV
          echo "todayDate=$(date +%Y%m%dT%H%M%SZ)" >> $GITHUB_ENV
      -
        name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.todayDate }}
          release_name: Prerelease ${{ env.todayDate }}
          draft: false
          prerelease: true
      - 
        name: Attach binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          todayDate: ${{ env.todayDate }}
          version: ${{ env.version }}
          name: ${{ env.name }}
        run: |
          set -x
          mv ./artifact/$name-$version-x86_64.iso ./artifact/$name-$todayDate-x86_64.iso
          mv ./artifact/$name-$version-x86.iso ./artifact/$name-$todayDate-x86.iso

          assets=()
          for asset in ./artifact/*; do
            assets+=("-a" "$asset")
          done
          hub release edit "${assets[@]}" -m "This is an automated build based on the latest code. Use with caution." $todayDate



name: Build yacd

on: push

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip-ci')" 
    runs-on: ubuntu-latest
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends wget debootstrap grub-pc-bin \
          grub-efi-amd64-bin mtools squashfs-tools xorriso ca-certificates curl \
          libusb-1.0-0-dev gcc make gzip zstd unzip libc6-dev
    - 
      name: Build for x86_64
      env:
        ARCH: x86_64
      run: |
        sed -i "/Exit if user isn't root/aVERSION='$(cat version)'" build.sh
        sudo chmod 755 build.sh
        sudo -E ./build.sh
    - 
      name: Build for x86
      env:
        ARCH: x86
      run: |
        sudo -E ./build.sh
    -
      name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        path: out/*
  
  upload-prerelease:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' # Only upload prereleases when it gets merged to main
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Download artifacts
        uses: actions/download-artifact@v2
      -
        name: Get version information
        run: |
          echo "version=$(cat version)" >> $GITHUB_ENV
          echo "todayDate=$(date +%Y%m%dT%H%M%SZ)" >> $GITHUB_ENV
      -
        name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.todayDate }}
          release_name: Prerelease ${{ env.todayDate }}
          draft: false
          prerelease: true
      - 
        name: Attach binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          todayDate: ${{ env.todayDate }}
          version: ${{ env.version }}
        run: |
          set -x
          mv ./artifact/yacd-$version-x86_64.iso ./artifact/yacd-$todayDate-x86_64.iso
          mv ./artifact/yacd-$version-x86.iso ./artifact/yacd-$todayDate-x86.iso

          assets=()
          for asset in ./artifact/*; do
            assets+=("-a" "$asset")
          done
          hub release edit "${assets[@]}" -m "This is an automated build based on the latest code. Use with caution." $todayDate


